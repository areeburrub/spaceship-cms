// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model WaitingList {
  id        String   @id @default(uuid())
  email     String   @unique
  createdAt DateTime @default(now())
}

model User {
  id             String          @id @default(uuid())
  username       String          @unique
  email          String          @unique
  password       String
  createdAt      DateTime        @default(now())
  GitHubAccounts GitHubAccount[]
  ProjectUsers   ProjectUser[]
  Session        Session[]
}

model Session {
  id           String   @id @default(uuid())
  userId       String
  refreshToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model GitHubAccount {
  id             String       @id @default(uuid())
  userId         String
  githubUsername String
  accessToken    String
  createdAt      DateTime     @default(now())
  user           User         @relation(fields: [userId], references: [id])
  repositories   Repository[]
}

model Repository {
  id              String        @id @default(uuid())
  githubAccountId String
  repositoryUrl   String
  name            String
  createdAt       DateTime      @default(now())
  githubAccount   GitHubAccount @relation(fields: [githubAccountId], references: [id])
  project         Project?
}

model Project {
  id           String        @id @default(uuid())
  name         String
  repositoryId String?       @unique
  createdAt    DateTime      @default(now())
  repository   Repository?   @relation(fields: [repositoryId], references: [id])
  ProjectUsers ProjectUser[]
}

model ProjectUser {
  id        String   @id @default(uuid())
  projectId String
  userId    String
  role      String
  addedAt   DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}
